import { SlashCommandBuilder, EmbedBuilder, PermissionFlagsBits } from 'discord.js';
import type { Command } from '../../types';

export const ticketCommand: Command = {
  data: new SlashCommandBuilder()
    .setName('ticket')
    .setDescription('–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º–æ–π —Ç–∏–∫–µ—Ç–æ–≤')
    .setDefaultMemberPermissions(PermissionFlagsBits.ManageChannels)
    .addSubcommand(subcommand =>
      subcommand
        .setName('setup')
        .setDescription('–°–æ–∑–¥–∞—Ç—å –ø–∞–Ω–µ–ª—å —Ç–∏–∫–µ—Ç–æ–≤')
        .addChannelOption(option =>
          option
            .setName('channel')
            .setDescription('–ö–∞–Ω–∞–ª –¥–ª—è —Ä–∞–∑–º–µ—â–µ–Ω–∏—è –ø–∞–Ω–µ–ª–∏ —Ç–∏–∫–µ—Ç–æ–≤')
            .setRequired(true)
        )
    )
    .addSubcommand(subcommand =>
      subcommand
        .setName('close')
        .setDescription('–ó–∞–∫—Ä—ã—Ç—å —Ç–∏–∫–µ—Ç')
        .addStringOption(option =>
          option
            .setName('reason')
            .setDescription('–ü—Ä–∏—á–∏–Ω–∞ –∑–∞–∫—Ä—ã—Ç–∏—è')
            .setRequired(false)
        )
    )
    .addSubcommand(subcommand =>
      subcommand
        .setName('claim')
        .setDescription('–í–∑—è—Ç—å —Ç–∏–∫–µ—Ç –≤ —Ä–∞–±–æ—Ç—É')
    )
    .addSubcommand(subcommand =>
      subcommand
        .setName('unclaim')
        .setDescription('–°–Ω—è—Ç—å —Å —Å–µ–±—è —Ç–∏–∫–µ—Ç')
    )
    .addSubcommand(subcommand =>
      subcommand
        .setName('add')
        .setDescription('–î–æ–±–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Ç–∏–∫–µ—Ç')
        .addUserOption(option =>
          option
            .setName('user')
            .setDescription('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è')
            .setRequired(true)
        )
    )
    .addSubcommand(subcommand =>
      subcommand
        .setName('remove')
        .setDescription('–£–±—Ä–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —Ç–∏–∫–µ—Ç–∞')
        .addUserOption(option =>
          option
            .setName('user')
            .setDescription('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è')
            .setRequired(true)
        )
    )
    .addSubcommand(subcommand =>
      subcommand
        .setName('transcript')
        .setDescription('–°–æ–∑–¥–∞—Ç—å —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç —Ç–∏–∫–µ—Ç–∞')
    ),

  async execute(interaction, bot) {
    const subcommand = interaction.options.getSubcommand();

    switch (subcommand) {
      case 'setup':
        await handleSetup(interaction, bot);
        break;
      case 'close':
        await handleClose(interaction, bot);
        break;
      case 'claim':
        await handleClaim(interaction, bot);
        break;
      case 'unclaim':
        await handleUnclaim(interaction, bot);
        break;
      case 'add':
        await handleAdd(interaction, bot);
        break;
      case 'remove':
        await handleRemove(interaction, bot);
        break;
      case 'transcript':
        await handleTranscript(interaction, bot);
        break;
      default:
        await interaction.reply({
          content: '‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –ø–æ–¥–∫–æ–º–∞–Ω–¥–∞',
          ephemeral: true
        });
    }
  },

  category: 'admin',
  permissions: [PermissionFlagsBits.ManageChannels],
  ownerOnly: false,
  guildOnly: true
};

async function handleSetup(interaction: any, bot: any) {
  const channel = interaction.options.getChannel('channel');

  if (!channel || channel.type !== 0) { // TEXT_CHANNEL
    await interaction.reply({
      content: '‚ùå –í—ã–±–µ—Ä–∏—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤—ã–π –∫–∞–Ω–∞–ª',
      ephemeral: true
    });
    return;
  }

  await interaction.deferReply({ ephemeral: true });

  const success = await bot.ticketService.createTicketPanel(interaction.guild, channel.id);

  if (success) {
    await interaction.editReply({
      content: `‚úÖ –ü–∞–Ω–µ–ª—å —Ç–∏–∫–µ—Ç–æ–≤ —Å–æ–∑–¥–∞–Ω–∞ –≤ ${channel}`
    });
  } else {
    await interaction.editReply({
      content: '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–∞–Ω–µ–ª–∏ —Ç–∏–∫–µ—Ç–æ–≤'
    });
  }
}

async function handleClose(interaction: any, bot: any) {
  const reason = interaction.options.getString('reason') || '–ó–∞–∫—Ä—ã—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º';

  // Check if this is a ticket channel
  const ticket = await bot.prisma.ticket.findFirst({
    where: {
      channelId: interaction.channel.id,
      status: { not: 'closed' }
    }
  });

  if (!ticket) {
    await interaction.reply({
      content: '‚ùå –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –º–æ–∂–µ—Ç –±—ã—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∞ —Ç–æ–ª—å–∫–æ –≤ –∫–∞–Ω–∞–ª–µ —Ç–∏–∫–µ—Ç–∞',
      ephemeral: true
    });
    return;
  }

  await interaction.deferReply({ ephemeral: true });

  const result = await bot.ticketService.closeTicket(
    interaction.guild,
    ticket.id,
    interaction.member,
    reason
  );

  if (result.success) {
    await interaction.editReply({
      content: '‚úÖ –¢–∏–∫–µ—Ç –±—É–¥–µ—Ç –∑–∞–∫—Ä—ã—Ç —á–µ—Ä–µ–∑ 10 —Å–µ–∫—É–Ω–¥'
    });
  } else {
    await interaction.editReply({
      content: `‚ùå ${result.error}`
    });
  }
}

async function handleClaim(interaction: any, bot: any) {
  // Check if this is a ticket channel
  const ticket = await bot.prisma.ticket.findFirst({
    where: {
      channelId: interaction.channel.id,
      status: { not: 'closed' }
    }
  });

  if (!ticket) {
    await interaction.reply({
      content: '‚ùå –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –º–æ–∂–µ—Ç –±—ã—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∞ —Ç–æ–ª—å–∫–æ –≤ –∫–∞–Ω–∞–ª–µ —Ç–∏–∫–µ—Ç–∞',
      ephemeral: true
    });
    return;
  }

  await interaction.deferReply({ ephemeral: true });

  const result = await bot.ticketService.claimTicket(
    interaction.guild,
    ticket.id,
    interaction.member
  );

  if (result.success) {
    await interaction.editReply({
      content: '‚úÖ –í—ã –≤–∑—è–ª–∏ —Ç–∏–∫–µ—Ç –≤ —Ä–∞–±–æ—Ç—É'
    });
  } else {
    await interaction.editReply({
      content: `‚ùå ${result.error}`
    });
  }
}

async function handleUnclaim(interaction: any, bot: any) {
  // Check if this is a ticket channel
  const ticket = await bot.prisma.ticket.findFirst({
    where: {
      channelId: interaction.channel.id,
      status: { not: 'closed' }
    }
  });

  if (!ticket) {
    await interaction.reply({
      content: '‚ùå –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –º–æ–∂–µ—Ç –±—ã—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∞ —Ç–æ–ª—å–∫–æ –≤ –∫–∞–Ω–∞–ª–µ —Ç–∏–∫–µ—Ç–∞',
      ephemeral: true
    });
    return;
  }

  if (ticket.assignedTo !== interaction.user.id) {
    await interaction.reply({
      content: '‚ùå –í—ã –Ω–µ –Ω–∞–∑–Ω–∞—á–µ–Ω—ã –Ω–∞ —ç—Ç–æ—Ç —Ç–∏–∫–µ—Ç',
      ephemeral: true
    });
    return;
  }

  try {
    await bot.prisma.ticket.update({
      where: { id: ticket.id },
      data: {
        assignedTo: null,
        status: 'open'
      }
    });

    const embed = new EmbedBuilder()
      .setTitle('üë§ –¢–∏–∫–µ—Ç –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω')
      .setDescription(`${interaction.user} —Å–Ω—è–ª —Å —Å–µ–±—è —ç—Ç–æ—Ç —Ç–∏–∫–µ—Ç`)
      .setColor(0x95a5a6)
      .setTimestamp();

    await interaction.channel.send({ embeds: [embed] });

    await interaction.reply({
      content: '‚úÖ –í—ã —Å–Ω—è–ª–∏ —Å —Å–µ–±—è —Ç–∏–∫–µ—Ç',
      ephemeral: true
    });
  } catch (error) {
    await interaction.reply({
      content: '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–Ω—è—Ç–∏–∏ —Ç–∏–∫–µ—Ç–∞',
      ephemeral: true
    });
  }
}

async function handleAdd(interaction: any, bot: any) {
  const user = interaction.options.getUser('user');

  // Check if this is a ticket channel
  const ticket = await bot.prisma.ticket.findFirst({
    where: {
      channelId: interaction.channel.id,
      status: { not: 'closed' }
    }
  });

  if (!ticket) {
    await interaction.reply({
      content: '‚ùå –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –º–æ–∂–µ—Ç –±—ã—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∞ —Ç–æ–ª—å–∫–æ –≤ –∫–∞–Ω–∞–ª–µ —Ç–∏–∫–µ—Ç–∞',
      ephemeral: true
    });
    return;
  }

  try {
    await interaction.channel.permissionOverwrites.create(user.id, {
      ViewChannel: true,
      SendMessages: true,
      ReadMessageHistory: true,
      AttachFiles: true
    });

    const embed = new EmbedBuilder()
      .setTitle('‚ûï –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ–±–∞–≤–ª–µ–Ω')
      .setDescription(`${user} –±—ã–ª –¥–æ–±–∞–≤–ª–µ–Ω –≤ —Ç–∏–∫–µ—Ç`)
      .setColor(0x2ecc71)
      .setTimestamp();

    await interaction.channel.send({ embeds: [embed] });

    await interaction.reply({
      content: `‚úÖ ${user} –¥–æ–±–∞–≤–ª–µ–Ω –≤ —Ç–∏–∫–µ—Ç`,
      ephemeral: true
    });
  } catch (error) {
    await interaction.reply({
      content: '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è',
      ephemeral: true
    });
  }
}

async function handleRemove(interaction: any, bot: any) {
  const user = interaction.options.getUser('user');

  // Check if this is a ticket channel
  const ticket = await bot.prisma.ticket.findFirst({
    where: {
      channelId: interaction.channel.id,
      status: { not: 'closed' }
    }
  });

  if (!ticket) {
    await interaction.reply({
      content: '‚ùå –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –º–æ–∂–µ—Ç –±—ã—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∞ —Ç–æ–ª—å–∫–æ –≤ –∫–∞–Ω–∞–ª–µ —Ç–∏–∫–µ—Ç–∞',
      ephemeral: true
    });
    return;
  }

  if (user.id === ticket.userId) {
    await interaction.reply({
      content: '‚ùå –ù–µ–ª—å–∑—è —É–±—Ä–∞—Ç—å —Å–æ–∑–¥–∞—Ç–µ–ª—è —Ç–∏–∫–µ—Ç–∞',
      ephemeral: true
    });
    return;
  }

  try {
    await interaction.channel.permissionOverwrites.delete(user.id);

    const embed = new EmbedBuilder()
      .setTitle('‚ûñ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–¥–∞–ª–µ–Ω')
      .setDescription(`${user} –±—ã–ª —É–¥–∞–ª–µ–Ω –∏–∑ —Ç–∏–∫–µ—Ç–∞`)
      .setColor(0xe74c3c)
      .setTimestamp();

    await interaction.channel.send({ embeds: [embed] });

    await interaction.reply({
      content: `‚úÖ ${user} —É–¥–∞–ª–µ–Ω –∏–∑ —Ç–∏–∫–µ—Ç–∞`,
      ephemeral: true
    });
  } catch (error) {
    await interaction.reply({
      content: '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è',
      ephemeral: true
    });
  }
}

async function handleTranscript(interaction: any, bot: any) {
  // Check if this is a ticket channel
  const ticket = await bot.prisma.ticket.findFirst({
    where: {
      channelId: interaction.channel.id
    },
    include: {
      messages: {
        orderBy: { createdAt: 'asc' }
      }
    }
  });

  if (!ticket) {
    await interaction.reply({
      content: '‚ùå –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –º–æ–∂–µ—Ç –±—ã—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∞ —Ç–æ–ª—å–∫–æ –≤ –∫–∞–Ω–∞–ª–µ —Ç–∏–∫–µ—Ç–∞',
      ephemeral: true
    });
    return;
  }

  await interaction.deferReply({ ephemeral: true });

  try {
    // Create transcript
    let transcript = `=== –¢–†–ê–ù–°–ö–†–ò–ü–¢ –¢–ò–ö–ï–¢–ê ===\n`;
    transcript += `ID: ${ticket.id}\n`;
    transcript += `–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${ticket.userId}\n`;
    transcript += `–°–æ–∑–¥–∞–Ω: ${ticket.createdAt.toLocaleString('ru-RU')}\n`;
    transcript += `–°—Ç–∞—Ç—É—Å: ${ticket.status}\n`;
    transcript += `–ö–∞—Ç–µ–≥–æ—Ä–∏—è: ${ticket.category}\n`;
    transcript += `\n=== –°–û–û–ë–©–ï–ù–ò–Ø ===\n\n`;

    // Get messages from Discord channel
    const messages = await interaction.channel.messages.fetch({ limit: 100 });
    const sortedMessages = Array.from(messages.values()).reverse();

    for (const message of sortedMessages) {
      if (message.author.bot && message.embeds.length > 0) continue; // Skip bot embeds
      transcript += `[${message.createdAt.toLocaleString('ru-RU')}] ${message.author.tag}: ${message.content}\n`;
      
      if (message.attachments.size > 0) {
        for (const attachment of message.attachments.values()) {
          transcript += `  üìé ${attachment.name}: ${attachment.url}\n`;
        }
      }
    }

    await interaction.editReply({
      content: 'üìÑ –¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç —Ç–∏–∫–µ—Ç–∞',
      files: [{
        attachment: Buffer.from(transcript, 'utf8'),
        name: `ticket-${ticket.id}-transcript.txt`
      }]
    });
  } catch (error) {
    await interaction.editReply({
      content: '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç–∞'
    });
  }
}

export default ticketCommand; 